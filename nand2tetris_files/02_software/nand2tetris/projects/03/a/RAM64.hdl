// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=output1, b=output2, c=output3, d=output4, e=output5, f=output6, g=output7, h=output8);
    RAM8(in=in, load=output1, address=address[0..2], out=output9);
    RAM8(in=in, load=output2, address=address[0..2], out=output10);
    RAM8(in=in, load=output3, address=address[0..2], out=output11);
    RAM8(in=in, load=output4, address=address[0..2], out=output12);
    RAM8(in=in, load=output5, address=address[0..2], out=output13);
    RAM8(in=in, load=output6, address=address[0..2], out=output14);
    RAM8(in=in, load=output7, address=address[0..2], out=output15);
    RAM8(in=in, load=output8, address=address[0..2], out=output16);
    Mux8Way16(a=output9, b=output10, c=output11, d=output12, e=output13, f=output14, g=output15, h=output16, sel=address[3..5], out=out);
    
}